[
  {
    "id": "recycling-app",
    "title": "Live Thrive CHaRM Mobile App",
    "imageSrc": "projects/recycling-app.png",
    "description": "Cross-platform full-stack mobile scheduling system for Live Thrive",
    "skills": ["Flutter", "Dart", "C#", ".NET 8", "SQL", "Azure", "Firebase", "Figma"],
    "date": "August 2024 - May 2025",
    "demo": "",
    "source": "https://github.com/seungabaek/JIC-4302-LiveThrive",
    "content": {
      "overview": "Live Thrive's CHaRM (Center for Hard to Recycle Materials) is a local nonprofit that needed a solution to their appointment scheduling process. Our team of five Georgia Tech CS students developed a comprehensive mobile platform that consolidates scheduling, check-in processes, and recycling information into a single cross-platform application. The app not only simplifies the recycling drop-off experience but also provides a foundation for future expansion into facility tours, volunteer scheduling, and educational events.",
      
      "teamAndRoles": {
        "description": "This was our junior capstone project with rotating roles so all members were exposed to new skills:",
        "members": [
          "Seung-a Baek (me) - Category selection, FAQ system, location views, API integration",
          "Joshua Buchsbaum - API development, QR code generation, appointment management",
          "Keegan Thompson - Calendar widget, home screen, facility management",
          "Ryan Seo - Check-in page, appointment booking flow, signup integration",
          "Joseph Atkinson - Staff features, location filtering, admin appointment management"
        ]
      },
      
      "problem": [
        "Live Thrive's existing appointment system was done through a third-party system (SimplyBook)",
        "No consolidated platform for scheduling recycling drop-offs",
        "Lack of real-time availability information for multiple facility locations",
        "Manual check-in process causing delays and confusion",
        "Limited accessibility to information about accepted items and fees",
        "No distinction between resident, business, and VIP appointment types"
      ],
      
      "systemArchitecture": {
        "description": "We designed a three-tier architecture prioritizing security, scalability, and cross-platform compatibility:",
        "components": [
          "Frontend: Flutter/Dart for unified iOS/Android development",
          "Backend: .NET 8 API hosted on Azure App Service",
          "Database: Azure SQL Database with stored procedures",
          "Authentication: Firebase for secure user management",
          "External Services: QR code generation for contactless check-in"
        ]
      },
      
      "designProcess": {
        "description": "Our design process centered on Nielsen's usability heuristics and Live Thrive's brand identity:",
        "keyFeatures": [
          "Minimalist interface with large, intuitive buttons for accessibility",
          "Consistent color scheme matching Live Thrive's branding",
          "Error prevention through confirmation dialogs and input validation",
          "Real-world metaphors (calendar icons, map pins, phone symbols)",
          "Comprehensive FAQ system with 'flippable card' design"
        ]
      },
      
      "technicalImplementation": {
        "frontend": {
          "title": "Frontend (Flutter/Dart)",
          "details": [
            "Single codebase for both iOS and Android platforms",
            "Custom calendar widget for intuitive date selection",
            "QR code generation and scanning for contactless check-in",
            "Responsive design adapting to various screen sizes",
            "State management for real-time appointment updates"
          ]
        },
        "api": {
          "title": "API (.NET 8/C#)",
          "details": [
            "RESTful endpoints with HTTPS encryption",
            "JSON data format for efficient client-server communication",
            "Azure App Service hosting for reliable uptime",
            "Stored procedure calls for optimized database operations",
            "Role-based access control for admin/staff features"
          ]
        },
        "database": {
          "title": "Database (Azure SQL)",
          "details": [
            "Relational schema with 6 core entities: users, appointments, facilities, facility_days, recyclable_items, example_items",
            "Foreign key relationships ensuring data integrity",
            "Stored procedures for complex queries and business logic",
            "Appointment type system (Resident, Business, VIP)",
            "Facility-specific scheduling with dynamic availability"
          ]
        }
      },
      
      "keyFeatures": [
        {
          "name": "Smart Appointment Booking",
          "description": "Multi-step booking process with location selection, category choice, and real-time availability calendar"
        },
        {
          "name": "QR Code Check-in",
          "description": "Contactless check-in system generating unique QR codes for each appointment"
        },
        {
          "name": "Multi-User Support",
          "description": "Role-based access for residents, businesses, VIP users, staff, and administrators"
        },
        {
          "name": "Admin Dashboard",
          "description": "Comprehensive tools for viewing weekly appointment volumes, managing availability, and canceling bookings"
        },
        {
          "name": "Items Database",
          "description": "Searchable catalog of accepted recyclable items with fees and examples"
        },
        {
          "name": "Facility Information",
          "description": "Real-time hours, addresses, and contact information for multiple CHaRM locations"
        }
      ],
      
      "uiUxHighlights": [
        "Color-coded appointment density visualization for admins (green-orange-red scale)",
        "Flippable FAQ cards for intuitive information discovery",
        "Consistent back navigation throughout the app",
        "Error prevention through grayed-out buttons and confirmation dialogs",
        "Visual feedback for all user actions"
      ],
      
      "securityMeasures": [
        "Firebase Authentication preventing password storage in main database",
        "HTTPS encryption for all API communications",
        "Azure firewall restricting database access",
        "Role-based permissions system",
        "Secure handling of minimal PII (only emails and zip codes)"
      ],
      
      "challenges": [
        "Coordinating development across a 5-person team",
        "Integrating multiple technologies (Flutter, .NET, SQL) seamlessly",
        "Designing intuitive UI for diverse user types (residents, businesses, admins)",
        "Implementing real-time appointment availability across multiple facilities",
        "Balancing feature richness with app performance"
      ],
      
      "futureEnhancements": [
        "Facility tour scheduling integration",
        "Volunteer event management system",
        "Payment processing for recycling fees",
        "Push notifications for appointment reminders",
        "Multi-language support for broader accessibility",
        "Analytics dashboard for facility usage patterns"
      ],
      
      "impact": "This project transformed Live Thrive's appointment scheduling from a fragmented manual process to a streamlined digital experience. The cross-platform solution ensures accessibility for all users regardless of device preference, while the admin tools provide unprecedented visibility into facility operations.",
      
      "lessonsLearned": "Working on a team of five taught me valuable lessons about collaborative development, from coordinating API integrations to maintaining consistent UI/UX across different developers' contributions. The project reinforced the importance of user-centered design, especially when creating solutions for diverse user groups with varying technical expertise."
    }
  },
  {
    "id": "manghost-cafe",
    "title": "Manghost Café",
    "imageSrc": "/projects/manghost-cafe.png",
    "description": "3D single player restaurant game with AI pathfinding and real-time gameplay mechanics",
    "skills": ["Unity", "C#", "NavMesh", "Git"],
    "date": "January 2025 - May 2025",
    "demo": "",
    "source": "https://github.gatech.edu/sbaek74/MangoTankGames",
    "content": {
      "overview": "Manghost Café is a 3D restaurant simulation game that combines strategic gameplay with real-time coordination. Players take on multiple roles to manage a bustling café, serving varying orders from customers within time constraints.",
      "gameDesign": {
        "concept": "The game draws inspiration from popular cooking games like Overcooked and Not Your Neighbor, but adds unique mechanics focused on ---",
        "coreGameplay": "Players must balance speed, accuracy, and customer happiness to succeed"
      },
      "technicalImplementation": {
        "stateMachine": {
          "description": "Each player character operates on a finite state machine",
          "states": [
            "Idle - Awaiting player input",
            "Moving - Navigating to target location",
            "Cooking - Preparing food items",
            "Carrying - Transporting items",
            "Serving - Delivering orders to customers"
          ]
        },
        "aiCustomers": {
          "description": "NavMesh-based pathfinding creates realistic customer movement",
          "features": [
            "Dynamic obstacle avoidance for crowded restaurants",
            "Patience meters that affect tipping and reviews",
            "Group behavior for parties dining together",
            "Varied customer types with different preferences and patience levels"
          ]
        }
      },
      "gameMechanics": {
        "orderSystem": [
          "Dynamic order generation based on restaurant level",
          "Combo system for serving multiple orders quickly",
          "Special orders with bonus rewards",
          "Rush hour events with increased customer flow"
        ],
        "uiElements": [
          "Order tickets that update dynamically",
          "Customer satisfaction indicators",
          "Revenue and tip tracking",
          "Upgrade menu for restaurant improvements"
        ]
      },
      "optimization": [
        "Object Pooling: Reusing customer and food objects",
        "LOD System: Reduced detail for distant objects",
        "Batch Rendering: Combining similar sprites",
        "Efficient Pathfinding: Caching common paths"
      ],
      "artAndAudio": {
        "visualStyle": [
          "3D sprites with smooth animations",
          "Particle effects for cooking and serving",
          "Dynamic lighting for atmosphere"
        ],
        "audio": [
          "Cheerful background music with intensity scaling",
          "Satisfying sound effects for every action"
        ]
      },
      "levels": [
        {
          "name": "East",
          "description": "Simple layout for learning mechanics"
        },
        {
          "name": "Medium",
          "description": "--"
        },
        {
          "name": "Hard",
          "description": "--"
        },
        {
          "name": "Rooftop Restaurant",
          "description": "--"
        }
      ],
      "progression": [
        "Experience points for completed orders",
        "Unlockable recipes and equipment",
        "Restaurant customization options",
        "Leaderboards for competitive players"
      ],
      "challenges": [
        "Synchronization Issues: Ensuring all players see consistent game state",
        "Pathfinding Conflicts: Handling multiple AI agents in tight spaces",
        "Performance on Low-End Devices: Optimizing for broad compatibility",
        "Balancing Difficulty: Creating fun challenges for all skill levels"
      ],
      "futureUpdates": [
        "Workshop support for custom restaurants",
        "Seasonal events with special recipes",
        "Competitive tournament mode",
        "Mobile port with cross-platform play"
      ]
    }
  },
  {
    "id": "threat-intelligence",
    "title": "Threat Intelligence Sharing System",
    "imageSrc": "projects/threat-intelligence.png",
    "description": "Decentralized metadata-sharing platform for cyber threat intelligence using peer-to-peer technology",
    "skills": ["Go", "libp2p", "Docker", "JSON-RPC"],
    "date": "August 2024",
    "demo": "",
    "source": "https://github.com/seungabaek/threat-intelligence",
    "content": {
      "overview": "In today's interconnected digital landscape, sharing cyber threat intelligence quickly and securely is crucial for organizational defense. This project develops a decentralized platform that enables peer-to-peer sharing of threat intelligence metadata without relying on centralized infrastructure.",
      "problemStatement": {
        "centralizedIssues": [
          "Single points of failure that attackers can target",
          "Trust issues with centralized authorities",
          "Scalability constraints as data volumes grow",
          "Privacy concerns when sharing sensitive security data",
          "High infrastructure costs for maintaining central servers"
        ],
        "irisImprovements": [
          "Fully decentralized architecture with no central authority",
          "Enhanced privacy through selective disclosure",
          "Improved efficiency via intelligent chunk distribution",
          "Better resilience against network partitions"
        ]
      },
      "architecture": {
        "coreComponents": {
          "description": "The system consists of several interconnected components",
          "components": [
            "Host - P2P network host",
            "DHT - Distributed hash table for peer discovery",
            "PubSub - Publishing/subscription system",
            "Storage - Local data storage",
            "Metadata Manager - Chunk management system"
          ]
        },
        "networkLayer": {
          "description": "Built on libp2p for robust P2P networking",
          "features": [
            "Peer Discovery: DHT-based peer finding",
            "NAT Traversal: Automatic hole punching",
            "Secure Communication: TLS encryption by default",
            "Protocol Multiplexing: Multiple protocols over single connection"
          ]
        }
      },
      "technicalDetails": {
        "chunkingAlgorithm": {
          "description": "Large threat intelligence datasets are broken into manageable chunks",
          "process": [
            "Data divided into fixed-size chunks",
            "Each chunk gets unique identifier (SHA-256 hash)",
            "Metadata tracks chunk relationships",
            "Efficient reassembly on retrieval"
          ]
        },
        "protocol": {
          "description": "Custom JSON-RPC protocol for metadata exchange",
          "messages": [
            "ChunkRequest: Request specific chunks by ID",
            "ChunkResponse: Deliver requested chunks",
            "MetadataAnnounce: Announce availability of new metadata",
            "PeerQuery: Discover peers with specific data"
          ]
        },
        "distribution": {
          "rarityFirst": [
            "Tracks chunk availability across network",
            "Preferentially shares chunks with few replicas",
            "Prevents popular chunks from dominating bandwidth"
          ],
          "adaptiveReplication": [
            "Chunk access patterns",
            "Network topology changes",
            "Node reliability scores",
            "Available storage capacity"
          ]
        }
      },
      "security": {
        "dataIntegrity": [
          "SHA-256 hashing for chunk verification",
          "Merkle trees for efficient dataset validation",
          "Digital signatures for authenticity"
        ],
        "privacy": [
          "Optional encryption for sensitive metadata",
          "Onion routing for anonymous requests",
          "Selective disclosure mechanisms"
        ]
      },
      "deployment": {
        "docker": {
          "description": "Containerized for easy deployment",
          "benefits": [
            "Consistent environment across platforms",
            "Easy scaling with orchestration tools",
            "Simplified dependency management"
          ]
        }
      },
      "performance": {
        "caching": [
          "Memory cache for hot chunks",
          "Disk cache for recent chunks",
          "Predictive prefetching based on access patterns"
        ],
        "bandwidth": [
          "Rate limiting per peer connection",
          "Priority queues for urgent requests",
          "Compression for chunk transfers"
        ],
        "metrics": [
          "Sub-second chunk retrieval for cached data",
          "Linear scalability up to 1000 nodes",
          "99.9% chunk availability with 5x replication",
          "60% bandwidth reduction compared to naive flooding"
        ]
      },
      "applications": [
        "Sharing indicators of compromise (IOCs) between organizations",
        "Distributing vulnerability information",
        "Collaborative threat hunting",
        "Incident response coordination"
      ],
      "futureWork": [
        "Machine learning for predictive chunk distribution",
        "Blockchain integration for immutable audit trails",
        "Advanced query capabilities using bloom filters",
        "Integration with existing SIEM platforms"
      ]
    }
  }
]